{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/06_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"src/weather/request.rs","byte_start":212,"byte_end":217,"line_start":10,"line_end":10,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn forecast<T, E>(&self, config: R::Config) -> Result<T, E>;","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/weather/request.rs","byte_start":212,"byte_end":278,"line_start":10,"line_end":10,"column_start":5,"column_end":71,"is_primary":true,"text":[{"text":"    async fn forecast<T, E>(&self, config: R::Config) -> Result<T, E>;","highlight_start":5,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn forecast<T, E>(&self, config: R::Config) -> Result<T, E>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/06_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"src/weather/request.rs","byte_start":787,"byte_end":792,"line_start":30,"line_end":30,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    async fn send_message(&self, input: Self::Input) -> Self::Output;","highlight_start":5,"highlight_end":10}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/weather/request.rs","byte_start":787,"byte_end":852,"line_start":30,"line_end":30,"column_start":5,"column_end":70,"is_primary":true,"text":[{"text":"    async fn send_message(&self, input: Self::Input) -> Self::Output;","highlight_start":5,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:30:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn send_message(&self, input: Self::Input) -> Self::Output;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`async` because of this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\n"}
{"message":"functions in traits cannot be declared `async`","code":{"code":"E0706","explanation":"`async fn`s are not yet supported in traits in Rust.\n\nErroneous code example:\n\n```compile_fail,edition2018\ntrait T {\n    // Neither case is currently supported.\n    async fn foo() {}\n    async fn bar(&self) {}\n}\n```\n\n`async fn`s return an `impl Future`, making the following two examples\nequivalent:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nasync fn foo() -> User {\n    unimplemented!()\n}\n// The async fn above gets desugared as follows:\nfn foo(&self) -> impl Future<Output = User> + '_ {\n    unimplemented!()\n}\n```\n\nBut when it comes to supporting this in traits, there are [a few implementation\nissues][async-is-hard]. One of them is returning `impl Trait` in traits is not\nsupported, as it would require [Generic Associated Types] to be supported:\n\n```edition2018,ignore (example-of-desugaring-equivalence)\nimpl MyDatabase {\n    async fn get_user(&self) -> User {\n        unimplemented!()\n    }\n}\n\nimpl MyDatabase {\n    fn get_user(&self) -> impl Future<Output = User> + '_ {\n        unimplemented!()\n    }\n}\n```\n\nUntil these issues are resolved, you can use the [`async-trait` crate], allowing\nyou to use `async fn` in traits by desugaring to \"boxed futures\"\n(`Pin<Box<dyn Future + Send + 'async>>`).\n\nNote that using these trait methods will result in a heap allocation\nper-function-call. This is not a significant cost for the vast majority of\napplications, but should be considered when deciding whether to use this\nfunctionality in the public API of a low-level function that is expected to be\ncalled millions of times a second.\n\nYou might be interested in visiting the [async book] for further information.\n\n[`async-trait` crate]: https://crates.io/crates/async-trait\n[async-is-hard]: https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/\n[Generic Associated Types]: https://github.com/rust-lang/rust/issues/44265\n[async book]: https://rust-lang.github.io/async-book/07_workarounds/06_async_in_traits.html\n"},"level":"error","spans":[{"file_name":"src/weather/request.rs","byte_start":2535,"byte_end":2540,"line_start":100,"line_end":100,"column_start":8,"column_end":13,"is_primary":false,"text":[{"text":"       async fn send_message(&self, input: Self::Input) -> <Self as Sender>::Output","highlight_start":8,"highlight_end":13}],"label":"`async` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/weather/request.rs","byte_start":2535,"byte_end":2903,"line_start":100,"line_end":111,"column_start":8,"column_end":10,"is_primary":true,"text":[{"text":"       async fn send_message(&self, input: Self::Input) -> <Self as Sender>::Output","highlight_start":8,"highlight_end":84},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let result = reqwest::get(input.borrow())","highlight_start":1,"highlight_end":54},{"text":"                .await","highlight_start":1,"highlight_end":23},{"text":"                .unwrap()","highlight_start":1,"highlight_end":26},{"text":"                .bytes()","highlight_start":1,"highlight_end":25},{"text":"                .await.unwrap();","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // http://api.weatherapi.com/v1/current.json?key=f2d262f44c84419ab9480149222809&q=London&aqi=no","highlight_start":1,"highlight_end":108},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`async` trait functions are not currently supported","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using the `async-trait` crate: https://crates.io/crates/async-trait","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0706]\u001b[0m\u001b[0m\u001b[1m: functions in traits cannot be declared `async`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:100:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m       async fn send_message(&self, input: Self::Input) -> <Self as Sender>::Output\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`async` because of this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let result = reqwest::get(input.borrow())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            // http://api.weatherapi.com/v1/current.json?key=f2d262f44c84419ab9480149222809&q=London&aqi=no\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `async` trait functions are not currently supported\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using the `async-trait` crate: https://crates.io/crates/async-trait\u001b[0m\n\n"}
{"message":"unused import: `std::process::Output`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/weather/request.rs","byte_start":25,"byte_end":45,"line_start":2,"line_end":2,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use std::process::Output;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/weather/request.rs","byte_start":21,"byte_end":46,"line_start":2,"line_end":2,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"use std::process::Output;","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::process::Output`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::process::Output;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `Cow`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/weather/request.rs","byte_start":1048,"byte_end":1051,"line_start":46,"line_end":46,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"    use std::borrow::{Borrow, Cow};","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/weather/request.rs","byte_start":1046,"byte_end":1051,"line_start":46,"line_end":46,"column_start":29,"column_end":34,"is_primary":true,"text":[{"text":"    use std::borrow::{Borrow, Cow};","highlight_start":29,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Cow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:46:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::borrow::{Borrow, Cow};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"unused import: `write`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/weather/request.rs","byte_start":1154,"byte_end":1159,"line_start":49,"line_end":49,"column_start":38,"column_end":43,"is_primary":true,"text":[{"text":"    use std::fmt::{Debug, Formatter, write};","highlight_start":38,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/weather/request.rs","byte_start":1152,"byte_end":1159,"line_start":49,"line_end":49,"column_start":36,"column_end":43,"is_primary":true,"text":[{"text":"    use std::fmt::{Debug, Formatter, write};","highlight_start":36,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `write`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:49:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::fmt::{Debug, Formatter, write};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"message":"unused import: `Weather`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/weather/request.rs","byte_start":1248,"byte_end":1255,"line_start":52,"line_end":52,"column_start":62,"column_end":69,"is_primary":true,"text":[{"text":"    use crate::weather::request::{Reciever, Request, Sender, Weather, WeatherError};","highlight_start":62,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/weather/request.rs","byte_start":1246,"byte_end":1255,"line_start":52,"line_end":52,"column_start":60,"column_end":69,"is_primary":true,"text":[{"text":"    use crate::weather::request::{Reciever, Request, Sender, Weather, WeatherError};","highlight_start":60,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Weather`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:52:62\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::weather::request::{Reciever, Request, Sender, Weather, WeatherError};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"method `send_message` has an incompatible type for trait","code":{"code":"E0053","explanation":"The parameters of any trait method must match between a trait implementation\nand the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0053\ntrait Foo {\n    fn foo(x: u16);\n    fn bar(&self);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    // error, expected u16, found i16\n    fn foo(x: i16) { }\n\n    // error, types differ in mutability\n    fn bar(&mut self) { }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/weather/request.rs","byte_start":2587,"byte_end":2611,"line_start":100,"line_end":100,"column_start":60,"column_end":84,"is_primary":true,"text":[{"text":"       async fn send_message(&self, input: Self::Input) -> <Self as Sender>::Output","highlight_start":60,"highlight_end":84}],"label":"expected enum `Result`, found opaque type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/weather/request.rs","byte_start":2587,"byte_end":2611,"line_start":100,"line_end":100,"column_start":60,"column_end":84,"is_primary":false,"text":[{"text":"       async fn send_message(&self, input: Self::Input) -> <Self as Sender>::Output","highlight_start":60,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"type in trait","code":null,"level":"note","spans":[{"file_name":"src/weather/request.rs","byte_start":839,"byte_end":851,"line_start":30,"line_end":30,"column_start":57,"column_end":69,"is_primary":true,"text":[{"text":"    async fn send_message(&self, input: Self::Input) -> Self::Output;","highlight_start":57,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected fn pointer `fn(&WeatherApi, String) -> Result<HashMap<String, String>, request::test::Err>`\n   found fn pointer `fn(&WeatherApi, String) -> impl Future<Output = <WeatherApi as request::Sender>::Output>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0053]\u001b[0m\u001b[0m\u001b[1m: method `send_message` has an incompatible type for trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:100:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m       async fn send_message(&self, input: Self::Input) -> <Self as Sender>::Output\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `Result`, found opaque type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: type in trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:30:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn send_message(&self, input: Self::Input) -> Self::Output;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mWeatherApi, String) -> \u001b[0m\u001b[0m\u001b[1mResult<HashMap<String, String>, request::test::Err>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found fn pointer `fn(\u001b[0m\u001b[0m\u001b[1m&\u001b[0m\u001b[0mWeatherApi, String) -> \u001b[0m\u001b[0m\u001b[1mimpl Future<Output = <WeatherApi as request::Sender>::Output>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/weather/request.rs","byte_start":2620,"byte_end":2903,"line_start":101,"line_end":111,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        {","highlight_start":9,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let result = reqwest::get(input.borrow())","highlight_start":1,"highlight_end":54},{"text":"                .await","highlight_start":1,"highlight_end":23},{"text":"                .unwrap()","highlight_start":1,"highlight_end":26},{"text":"                .bytes()","highlight_start":1,"highlight_end":25},{"text":"                .await.unwrap();","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // http://api.weatherapi.com/v1/current.json?key=f2d262f44c84419ab9480149222809&q=London&aqi=no","highlight_start":1,"highlight_end":108},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"expected enum `Result`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"  expected enum `Result<HashMap<String, String>, request::test::Err>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/weather/request.rs:101:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let result = reqwest::get(input.borrow())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .await\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            // http://api.weatherapi.com/v1/current.json?key=f2d262f44c84419ab9480149222809&q=London&aqi=no\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `Result`, found `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:   expected enum `\u001b[0m\u001b[0m\u001b[1mResult<HashMap<String, String>, request::test::Err>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 5 previous errors; 4 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 5 previous errors; 4 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0053, E0308, E0706.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0053, E0308, E0706.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0053`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0053`.\u001b[0m\n"}
